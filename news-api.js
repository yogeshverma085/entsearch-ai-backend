import express from "express";
import axios from "axios";
import dotenv from "dotenv";
import { AzureOpenAI } from "openai";
import cors from "cors";

dotenv.config();

const app = express();
app.use(express.json());
app.use(cors());

// 🔑 API keys from .env
const NEWS_API_KEY = process.env.NEWS_API_KEY;
const AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT;
const AZURE_OPENAI_API_KEY = process.env.AZURE_OPENAI_API_KEY;
const AZURE_OPENAI_DEPLOYMENT = process.env.AZURE_OPENAI_DEPLOYMENT;

// 🧠 Azure OpenAI client
const client = new AzureOpenAI({
  endpoint: AZURE_OPENAI_ENDPOINT,
  apiKey: AZURE_OPENAI_API_KEY,
  deployment: AZURE_OPENAI_DEPLOYMENT,
  apiVersion: "2024-02-15-preview",
});

// 🔍 Route for query + AI summary
app.post("/api/news-ai", async (req, res) => {
  try {
    const query = req.body.query || "finance";

    // Step 1️⃣ — Fetch news from NewsAPI
    const newsResponse = await axios.get(
      `https://newsapi.org/v2/everything?q=${encodeURIComponent(
        query
      )}&language=en&sortBy=publishedAt&pageSize=5&apiKey=${NEWS_API_KEY}`
    );

    const articles = newsResponse.data.articles.map((a) => ({
      title: a.title,
      source: a.source.name,
      description: a.description,
      url: a.url,
      publishedAt: a.publishedAt,
    }));

    if (!articles.length) {
      return res.status(404).json({ error: "No news found for this query" });
    }

    // Step 2️⃣ — Prepare summary text
    const contextText = articles
      .map(
        (a, i) =>
          `${i + 1}. ${a.title} (${a.source}) - ${a.description || "No description"}`
      )
      .join("\n\n");

    // Step 3️⃣ — Send to Azure OpenAI for summary
    const prompt = `
You are a financial analyst AI. Summarize the following recent news headlines about "${query}" 
and provide key insights in 3-5 bullet points:

${contextText}
`;

    const aiResponse = await client.chat.completions.create({
      messages: [{ role: "user", content: prompt }],
      max_tokens: 300,
    });

    const answer =
      aiResponse.choices?.[0]?.message?.content ||
      "No summary generated by AI.";

    // Step 4️⃣ — Send combined response
    res.json({
      query,
      totalResults: articles.length,
      articles,
      answer,
    });
  } catch (error) {
    console.error("Error:", error.message);
    res.status(500).json({ error: "Failed to fetch or process data" });
  }
});

app.listen(3000, () =>
  console.log("🚀 Server running with Azure AI on http://localhost:3000")
);